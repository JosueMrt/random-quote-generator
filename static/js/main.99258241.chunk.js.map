{"version":3,"sources":["Quotes.js","colors.js","App.js","serviceWorker.js","index.js"],"names":["Quotes","quote","author","colors","App","props","state","quoteNum","fade","handleClick","bind","this","setState","Math","floor","random","length","document","documentElement","style","setProperty","className","id","onAnimationEnd","href","class","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uQAoDeA,G,MApDA,CACX,CACIC,MAAO,4FACPC,OAAQ,oBAGZ,CACID,MAAO,6DACPC,OAAQ,iBAGZ,CACID,MAAO,oKACPC,OAAQ,gBAGZ,CACID,MAAO,6EACPC,OAAQ,uBAGZ,CACID,MAAO,uIACPC,OAAQ,mBAGZ,CACID,MAAO,2GACPC,OAAQ,mBAGZ,CACID,MAAO,4DACPC,OAAQ,iBAGZ,CACID,MAAO,sFACPC,OAAQ,mBAGZ,CACID,MAAO,qEACPC,OAAQ,2BAGZ,CACID,MAAO,UACPC,OAAQ,uBCnCDC,EAbA,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WCgCWC,E,kDApCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAU,EACVC,MAAM,GAER,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANF,E,0DASjBC,KAAKC,SAAU,CACbL,SAAUM,KAAKC,MAAMD,KAAKE,SAAWf,EAAOgB,QAC5CR,MAAM,IAERS,SAASC,gBAAgBC,MAAMC,YAAY,eAAgBjB,EAAOQ,KAAKL,MAAMC,a,+BAErE,IAAD,OACP,OACE,yBAAKc,UAAU,OACf,yBAAKC,GAAG,YAAYD,UAAU,aAC5B,yBAAKA,UAAWV,KAAKL,MAAME,KAAO,OAAS,GAAIe,eAAgB,kBAAM,EAAKX,SAAS,CAACJ,MAAM,MACxF,uBAAGc,GAAG,QAAN,IAAc,uBAAGD,UAAU,qBAA3B,IAAoDrB,EAAOW,KAAKL,MAAMC,UAAUN,MAAhF,KACA,uBAAGqB,GAAG,UAAN,IAAiBtB,EAAOW,KAAKL,MAAMC,UAAUL,OAA7C,MAEF,uBAAGsB,KAAK,2BAA2BF,GAAG,eAClC,4BAAQD,UAAU,mBAAkB,uBAAGI,MAAM,qBAE/C,uBAAGD,KAAK,eAAeF,GAAG,kBACxB,4BAAQD,UAAU,mBAAkB,uBAAGI,MAAM,4BAE/C,4BAAQJ,UAAU,kBAAkBC,GAAG,YAAYI,QAASf,KAAKF,aAAjE,mB,GA9BQkB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.99258241.chunk.js","sourcesContent":["const Quotes = [\r\n    {\r\n        quote: \"The greatest glory in living lies not in never falling, but in rising every time we fall.\",\r\n        author: \"- Nelson Mandela\"\r\n    },\r\n    \r\n    {\r\n        quote: \"The way to get started is to quit talking and begin doing.\",\r\n        author: \"- Walt Disney\"\r\n    },\r\n    \r\n    {\r\n        quote: \"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma â€“ which is living with the results of other people's thinking.\",\r\n        author: \"- Steve Jobs\"\r\n    },\r\n    \r\n    {\r\n        quote: \"If life were predictable it would cease to be life, and be without flavor.\",\r\n        author: \"- Eleanor Roosevelt\"\r\n    },\r\n    \r\n    {\r\n        quote: \"If you look at what you have in life, you'll always have more. If you look at what you don't have in life, you'll never have enough.\",\r\n        author: \"- Oprah Winfrey\"\r\n    },\r\n    \r\n    {\r\n        quote: \"If you set your goals ridiculously high and it's a failure, you will fail above everyone else's success.\",\r\n        author: \"- James Cameron\"\r\n    },\r\n    \r\n    {\r\n        quote: \"Life is what happens when you're busy making other plans.\",\r\n        author: \"- John Lennon\"\r\n    },\r\n    \r\n    {\r\n        quote: \"Spread love everywhere you go. Let no one ever come to you without leaving happier.\",\r\n        author: \"- Mother Teresa\"\r\n    },\r\n    \r\n    {\r\n        quote: \"When you reach the end of your rope, tie a knot in it and hang on.\",\r\n        author: \"- Franklin D. Roosevelt\"\r\n    },\r\n    \r\n    {\r\n        quote: \"Hee hee\",\r\n        author: \"- Michael Jackson\"\r\n    }\r\n]\r\n\r\nexport default Quotes;","const colors = [\r\n    \"#1abc9c\",\r\n    \"#2ecc71\",\r\n    \"#3498db\",\r\n    \"#9b59b6\",\r\n    \"#34495e\",\r\n    \"#e74c3c\",\r\n    \"#e67e22\",\r\n    \"#e74c3c\",\r\n    \"#f39c12\",\r\n    \"#d35400\"\r\n]\r\n\r\nexport default colors","import React from 'react';\r\nimport './App.css';\r\nimport Quotes from './Quotes.js'\r\nimport colors from './colors'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      quoteNum: 0,\r\n      fade: false\r\n    }\r\n    this.handleClick = this.handleClick.bind(this)\r\n  }\r\n  handleClick() {\r\n    this.setState ({          \r\n      quoteNum: Math.floor(Math.random() * Quotes.length),\r\n      fade: true\r\n    })\r\n    document.documentElement.style.setProperty('--main-color', colors[this.state.quoteNum]);\r\n  }\r\n  render() { \r\n    return (\r\n      <div className=\"App\">\r\n      <div id=\"quote-box\" className=\"quote-box\"> \r\n        <div className={this.state.fade ? 'fade' : ''} onAnimationEnd={() => this.setState({fade: false})}>\r\n          <p id=\"text\"> <i className=\"fa fa-quote-left\"></i> {Quotes[this.state.quoteNum].quote} </p> \r\n          <p id=\"author\"> {Quotes[this.state.quoteNum].author} </p>\r\n        </div>\r\n        <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">\r\n            <button className=\"btn btn-primary\"><i class=\"fab fa-twitter\"></i></button>\r\n          </a>\r\n          <a href=\"telegram.com\" id=\"telegram-quote\">\r\n            <button className=\"btn btn-primary\"><i class=\"fab fa-telegram-plane\"></i></button>\r\n          </a>\r\n          <button className=\"btn btn-primary\" id=\"new-quote\" onClick={this.handleClick}>New quote</button>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport '@fortawesome/fontawesome-free/css/all.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}